#!/bin/bash
set -Eeuo pipefail

VERSION=0.1.2


function backtrace() {
  local deptn=${#FUNCNAME[@]}

  for ((i=1; i<$deptn; i++)); do
    local func="${FUNCNAME[$i]}"
    local line="${BASH_LINENO[$((i-1))]}"
    local src="${BASH_SOURCE[$((i-1))]}"
    printf >&2 '%*s' $i '' # indent
    echo >&2 "at: ${UNDERLINE}$func()${RESET}, $src, line $line"
  done
}

function cleanup() {
  if [ $? -ne 0 ] && [ ${VERBOSE:-false} == "true" ]; then
    backtrace
  fi

  EXITMSG="${EXITMSG:-}"
  EXITSTATUS=${EXITSTATUS:-0}

  if [ "$EXITMSG" != "" ]; then
    if [ $EXITSTATUS -gt 0 ]; then
      error "$EXITMSG"
    else
      info "$EXITMSG"
    fi
  fi
  return $EXITSTATUS
}

trap 'cleanup' SIGINT ERR SIGINT EXIT

function interactiveHeader() {
  if tty -s; then
    purple=$(tput setaf 135)
    echo >&2 "${purple}${DIM}" 
    echo >&2 "______ _         _____              ";
    echo >&2 "| ___ \ |       |_   _|             ";
    echo >&2 "| |_/ / | _____  _| |_ __ __ _  ___ ";
    echo >&2 "|  __/| |/ _ \ \/ / | '__/ _\ |/ __|";
    echo >&2 "| |   | |  __/>  <| | | | (_| | (__ ";
    echo >&2 "\_|   |_|\___/_/\_\_/_|  \__,_|\___|";
    echo >&2 "                                    ";
    echo >&2 $RESET
    echo >&2 "${DIM}Instance Management Utility v$VERSION";
    echo >&2 $RESET
  fi
}

function main() {
  ProgName=$(basename $0)
  _load_modules
  setup_colors
  interactiveHeader

  mod=mod_help

  while [[ $# -gt 0 ]]; do
    case $1 in
      "-h" | "--help")
        break
        ;;
      "-d" | "--debug")
        set -x
        shift
        ;;
      "-v" | "--verbose")
        VERBOSE=true
        shift
        ;;
      "-y" | "--assume-yes")
        ASSUME_YES=true
        shift
        ;;
      "--install-dir" | "--plextrac-home")
        PLEXTRAC_HOME=$2
        shift
        shift
        ;;
      "--no-force-upgrade")
        FORCEUPGRADE="false"
        shift
        ;;
      "dist")
        mod=mod_dist
        break
        ;;
      *)
        if declare -f mod_$1 >/dev/null 2>&1; then
          mod=mod_$1
        else
          EXITMSG="Invalid argument $1"
          EXITSTATUS=1
          exit
        fi
        shift
        ;;
    esac
  done
  export PLEXTRAC_HOME=${PLEXTRAC_HOME:-/opt/plextrac}
  _load_env

  $mod
}

function _load_modules() {
  # Checks if all child functions are loaded, if not
  # loads them in from (assumed) current relative directory
  if ! declare -f z_end_of_plextrac >/dev/null 2>&1; then
    for module in $(find $(dirname $0) -type f -name "_*.sh"); do
      source $module
    done
  fi
}

function _load_env() {
  for env_file in "$PLEXTRAC_HOME/.env" .env config.txt; do
    if test -f $env_file; then
      source $env_file
      break 1
    fi
  done
}

function mod_dist() {
  if grep -q -e "^DOCKER_COMPOSE_ENCODED=.*" $0; then
    cat $0
  else
    sed -e '/main "$@"$/e \
      echo "" \
      cat '"$(dirname $0)"'/_*.sh \
      echo "" \
      echo -n "DOCKER_COMPOSE_ENCODED="; \
      base64 -w0 '"$(dirname $0)"'/../docker-compose.yml \
      echo "" \
      echo -n "DOCKER_COMPOSE_OVERRIDE_ENCODED="; \
      base64 -w0 '"$(dirname $0)"'/../docker-compose.override.yml \
      echo ""' \
      $0
  fi
}


function requires_user_root() {
  if [ "$EUID" -ne 0 ]; then
    die "${RED}Please run as root user (eg, with sudo)${RESET}"
  fi
}

function requires_user_plextrac {
  if [ "$EUID" -ne 1337 ]; then
    die "${RED}Please run as plextrac user${RESET}"
  fi
}

function mod_help() {
  title "Help for the PlexTrac management script"
  info "Available commands:"
  echo "backup                              perform backup on currently running PlexTrac application"
  echo "check                               checks for version & status of PlexTrac application"
  echo "configure                           does initial configuration required for PlexTrac application"
  echo "disk                                no idea"
  echo "more to come?                       sure"
  echo ""
  info "Available flags to modify command behavior:"
  echo " -h | --help                        prints this help message"
  echo " -d | --debug                       enables debug output"
  echo " -v | --verbose                     enables verbose output"
  echo " -y | --assume-yes                  assumes yes to all questions in script"
  echo " --install-dir | --plextrac-home    path to non-standard install directory. The default is /opt/plextrac"
  echo " --no-force-upgrade                 do not force install upgrade packages"
  echo ""
}

function mod_initialize() {
  title "Initializing Environment for PlexTrac..."
  requires_user_root
  upgrade_os
  install_os_dependencies
  install_docker "${FORCEUPGRADE-}"
  install_docker_compose "${FORCEUPGRADE-}"
  create_user
  configure_user_environment
  copy_scripts
  fix_file_ownership
}

function mod_install() {
  title "Installing PlexTrac Instance"
  requires_user_plextrac
  mod_configure
  mod_check
  info "Starting Couchbase before other services"
  compose_client up -d "$couchbaseComposeService"
  info "Sleeping to give Couchbase a chance to start up"
  local progressBar
  for i in `seq 1 20`; do
    progressBar=`printf ".%.0s%s"  {1..$i} "${progressBar:-}"`
    msg "\r%b" "${GREEN}[+]${RESET} ${NOCURSOR}${progressBar}"
    sleep 2
  done
  echo -n >&2 "${RESET}"
  msg " Done"
  configure_couchbase_users
  pull_docker_images
  mod_start
  mod_info
}

function mod_configure() {
  title "Setting up base PlexTrac configuration..."
  requires_user_plextrac
  generate_default_config
  login_dockerhub
  updateComposeConfig
  create_volume_directories
}

function mod_start() {
  title "Starting PlexTrac..."
  requires_user_plextrac
  compose_client up -d --remove-orphans

  info "Waiting for application startup"
  local progressBar
  # todo: extract this to function waitForCondition
  # it should take an optional param which is a function
  # that should return 0 when ready
  for i in `seq 1 30`; do
    progressBar=`printf ".%.0s%s"  {1..$i} "${progressBar:-}"`
    msg "\r%b" "${GREEN}[+]${RESET} ${NOCURSOR}${progressBar}"
    sleep 2
  done
  echo -n >&2 "${RESET}"
  msg " Done"
}

function mod_check() {
  title "Checking Local Configuration"
  requires_user_plextrac
  info "Checking Docker Compose Config"
  compose_client config -q && info "Config check passed"
  pending=`composeConfigNeedsUpdated || true`
  if [ "$pending" != "" ]; then
    error "Pending Changes:"
    msg "    %s\n" "$pending"
  fi
  VALIDATION_ONLY=1 configure_couchbase_users
}

function mod_update() {
  info "Updating to latest PlexTrac release..."
  mod_configure
  pull_docker_images
  mod_start
  mod_check
}


# Handle backing up PlexTrac instance
# Usage
#  plextrac backup

function mod_backup() {
  title "Running PlexTrac Backups"
  do_uploads_backup
  do_couchbase_backup
}

function do_uploads_backup() {
  # Yoink uploads out to a compressed tarball
  info "$coreBackendComposeService: Performing backup of uploads directory"
  mkdir -p ${PLEXTRAC_HOME}/backups/uploads
  compose_client run --rm --entrypoint='' -T \
    $coreBackendComposeService tar -czf - /usr/src/plextrac-api/uploads > ${PLEXTRAC_HOME}/backups/uploads/$(date "+%Y.%m.%d-%H.%M.%S").tar.gz 2>/dev/null
  debug "`ls -lah ${PLEXTRAC_HOME}/backups/uploads`"
  info "Done."
}

function do_couchbase_backup() {
  info "$couchbaseComposeService: Performing backup of couchbase database"
  # Yoink database backup out to a compressed tarball
  compose_client exec $couchbaseComposeService \
      cbbackup -m full "http://localhost:8091" /backups -u ${CB_BACKUP_USER} -p ${CB_BACKUP_PASS} -v
  info "Done."
}

function backup_ensureBackupDirectory() {
  local backupDir="${PLEXTRAC_HOME}/backups"
  info "Ensuring backup directory exists at $backupDir"
  if ! test -d "${backupDir}"; then
    debug "`mkdir -vp "${PLEXTRAC_HOME}/backups"`"
  fi
  log "Done"
}

# function validate_backups() {
#   # We should have a backup within the last 24h
#
# }

# Update ENV configuration
# Reads in `config.txt`, `.env` (if they exist) and merges with an auto-generated defaults
# configuration.
# Behavior:
#   Non-empty values from .env & config.txt are read into a local variable, preference given to .env
#   The existing, non-empty vars are imported to ensure secrets, etc remain stable
#   Default configuration is generated, using imported vars where applicable
#   The new base configuration (including any values set with imported vars) is merged with existing vars
#   This final result is diffed against the current .env for review
#   User is prompted to accept or deny the modifications
function generate_default_config() {
  info "Generating env config"

  # Read vars from .env & config.txt, skipping empty values
  # Output unique vars with preference given to .env
  local existingEnv=`cat ${PLEXTRAC_HOME}/.env 2>/dev/null || echo ""`
  local configTxt=`cat ${PLEXTRAC_HOME}/config.txt 2>/dev/null || echo ""`
  existingCfg=$(sort -u -t '=' -k 1,1 \
    <(echo "$existingEnv" | awk -F= 'length($2)') \
    <(echo "$configTxt" | awk -F= 'length($2)') \
    | awk 'NF' -)
  set -o allexport
  debug "Loading vars from existing config..."
  source <(echo "${existingCfg}")
  set +o allexport


  # Generate base env, using imported vars from above where applicable
  generatedEnv="
JWT_KEY=${JWT_KEY:-`generateSecret`}
MFA_KEY=${MFA_KEY:-`generateSecret`}
COOKIE_KEY=${COOKIE_KEY:-`generateSecret`}
PROVIDER_CODE_KEY=${PROVIDER_CODE_KEY:-`generateSecret`}
PLEXTRAC_HOME=$PLEXTRAC_HOME
CLIENT_DOMAIN_NAME=${CLIENT_DOMAIN_NAME:-$(hostname -f)}
DOCKER_HUB_USER=${DOCKER_HUB_USER:-plextracusers}
DOCKER_HUB_KEY=${DOCKER_HUB_KEY:-}
ADMIN_EMAIL=${ADMIN_EMAIL:-}
LETS_ENCRYPT_EMAIL=${LETS_ENCRYPT_EMAIL:-}
USE_CUSTOM_CERT=${USE_CUSTOM_CERT:-false}
USE_CUSTOM_MAILER_CERT=${USE_CUSTOM_MAILER_CERT:-false}
USE_MAILER_SSL=${USE_MAILER_SSL:-false}
COUCHBASE_URL=${couchbaseComposeService}
REDIS_PASSWORD=${REDIS_PASSWORD:-`generateSecret`}
REDIS_CONNECTION_STRING=redis
CB_BUCKET=reportMe
CB_API_USER=${CB_API_USER:-"ptapiuser"}
CB_ADMIN_USER=${CB_ADMIN_USER:-"ptadminuser"}
CB_BACKUP_USER=${CB_BACKUP_USER:-"ptbackupuser"}
CB_API_PASS=${CB_API_PASS:-`generateSecret`}
CB_ADMIN_PASS=${CB_ADMIN_PASS:-`generateSecret`}
CB_BACKUP_PASS=${CB_BACKUP_PASS:-`generateSecret`}
RUNAS_APPUSER=True
BACKUP_DIR=/opt/couchbase/backups
PLEXTRAC_PARSER_URL=https://plextracparser:4443
"


  # Merge the generated env with the local vars
  # Preference is given to the generated data so we can force new
  # values as needed (eg, rotating SENTRY_DSN)
  mergedEnv=$(echo "${generatedEnv}" | sort -u -t '=' -k 1,1 - <(echo "$existingCfg") | awk 'NF' -)

  diff -Nurb --color=always <(sort "${PLEXTRAC_HOME}/.env") <(echo "$mergedEnv") || true

  if test -f "${PLEXTRAC_HOME}/.env"; then
    if [ $(echo "$mergedEnv" | md5sum | awk '{print $1}') = $(md5sum "${PLEXTRAC_HOME}/.env" | awk '{print $1}') ]; then
      log "No change required";
    else
      if get_user_approval; then
        echo "$mergedEnv" > "${PLEXTRAC_HOME}/.env"
      else
        die "Unable to continue without updating .env"
      fi
    fi
  else
    info "Writing initial .env"
    echo "$mergedEnv" > "${PLEXTRAC_HOME}/.env"
  fi

  mv "${PLEXTRAC_HOME}/config.txt" "${PLEXTRAC_HOME}/config.txt.old" 2>/dev/null || true
  _load_env
  log "Done."
}

function generateSecret() {
  echo `head -c 64 /dev/urandom | base64 | head -c 32`
}

function login_dockerhub() {
  info "Logging into DockerHub to pull images"
  if [ -z ${DOCKER_HUB_KEY} ]; then
    die "ERROR: Docker Hub key not found, please set DOCKER_HUB_KEY in the .env and re-run configuration"
  fi

  docker login -u ${DOCKER_HUB_USER:-plextracusers} -p ${DOCKER_HUB_KEY}  > /dev/null 2>&1
  log "Done."
}

function updateComposeConfig() {
  title "Updating Docker Compose Configuration"
  docker_createInitialComposeOverrideFile
  targetComposeFile="${PLEXTRAC_HOME}/docker-compose.yml"

  info "Checking $targetComposeFile for changes"
  decodedComposeFile=$(base64 -d <<<$DOCKER_COMPOSE_ENCODED)
  if ! test -f "$targetComposeFile"; then
    debug "Creating initial file"
    echo "$decodedComposeFile" > $targetComposeFile
  fi

  if composeConfigNeedsUpdated; then
    if get_user_approval; then
      echo "$decodedComposeFile" > $targetComposeFile
    else
      die "Unable to continue without updating docker-compose.yml";
    fi
  fi
  info "Done."
}

function create_volume_directories() {
  log_func_header
  debug "Ensuring directories exist for Docker Volumes..."
  info "`compose_client config --format=json | jq '.volumes[] | .driver_opts.device | select(.)' | xargs -r mkdir -vp`"
  info "Done"
}


# Disk related functions

function check_disk_capacity() {
  dfOutput=`df -H -x tmpfs -x devtmpfs -x vfat -x squashfs`
  msg "    %s\n" "$dfOutput"
  currentDate=$(date -R)
  hostname=$(hostname -f)
  FAILMSG=""
  while read -r output; do
    usePercentage=$(echo $output | awk -F'%' '{ print $1}')
    partition=$(echo $output | awk '{ print $2 }' )
    if [ $usePercentage -ge 85 ]; then
      FAILMSG="${FAILMSG}\n    ${partition} is at ${usePercentage}% usage"
    fi
  done <<< $(awk 'NR != 1 { print $5 " " $1 }' <<<$dfOutput)

  if [ "$FAILMSG" != "" ]; then
    EXITSTATUS=1
    error "Low disk space on ${hostname} at ${currentDate}:\n${RESET}${FAILMSG}\n"
    error "Please verify you've got enough disk space before continuing! Either prune images using 'docker image prune -a' or expand the volume!"
  fi
}
# Set a few vars that will be useful elsewhere.
couchbaseComposeService="plextracdb"
coreFrontendComposeService="plextracnginx"
coreBackendComposeService="plextracapi"

function compose_client() {
  flags=($@)
  debug "executing docker-compose ${flags[@]}"
  docker-compose -f "${PLEXTRAC_HOME}/docker-compose.yml" -f "${PLEXTRAC_HOME}/docker-compose.override.yml" ${flags[@]}
}

function pull_docker_images() {
  info "Pulling updated docker images"
  # if [ ${VERBOSE:-false} != true ]; then
  #   ARGS='-q'
  # fi
  compose_client pull ${ARGS:-}
  info "Done."
}

function composeConfigNeedsUpdated() {
  info "Checking for pending changes to docker-compose.yml"
  decodedComposeFile=$(base64 -d <<<$DOCKER_COMPOSE_ENCODED)
  targetComposeFile="${PLEXTRAC_HOME}/docker-compose.yml"
  if [ $(echo "$decodedComposeFile" | md5sum | awk '{print $1}') == $(md5sum $targetComposeFile | awk '{print $1}') ]; then
    debug "docker-compose.yml content matches"; return 1;
  fi
  diff -N --unified=2 --color=always --label existing --label "updated" $targetComposeFile <(echo "$decodedComposeFile") || return 0
  return 1
}

function docker_createInitialComposeOverrideFile() {
  local targetOverrideFile="${PLEXTRAC_HOME}/docker-compose.override.yml"

  info "Checking for existing $targetOverrideFile"
  if ! test -f "$targetOverrideFile"; then
    info "Creating initial $targetOverrideFile"
    echo "$DOCKER_COMPOSE_OVERRIDE_ENCODED" | base64 -d > "$targetOverrideFile"
  fi
  log "Done"
}
# Provides information about the running PlexTrac instance
#
# Usage:
#  plextrac info
#  plextrac info --summary # print just the summary

function mod_info() {
  title "PlexTrac Instance Summary"
  info "Public URL: ${UNDERLINE}https://${CLIENT_DOMAIN_NAME}${RESET}"
  echo >&2 ""
  info "TLS Certificate:"
  msg "    %b\n" "`info_TLSCertificateDetails`"
  echo >&2 ""
  info "Services:"
  msg "    %s\n" "`releaseDetails`"

  title "Docker-Compose"

  info "Active Container Images"
  images=`compose_client images`
  msg "    %s\n" "$images"
  echo >&2 ""

  info "Active Services"
  active=`compose_client ps`
  msg "    %s\n" "$active"
  echo >&2 ""

  title "Host Details"
  info "Disk Statistics"
  msg `check_disk_capacity`
}

function info_TLSCertificateDetails() {
  local certInfo opensslOutput
  local issuer expires subject
  if opensslOutput="`echo | openssl s_client -servername localhost -connect localhost:443 2>/dev/null || true`"; then
    certInfo="`echo "$opensslOutput" | openssl x509 -noout -dates --checkend 6048000 -subject -issuer || true`"
    debug "$certInfo"
    echo "Issuer: \t`awk -F'=' '/issuer/ { $1=""; $2=""; print }' <<<$certInfo | sed 's/ //g'`"
    echo "Expires: \t`awk -F'=' '/notAfter/ { print $2}' <<<$certInfo`"
  else
    error "Certificate Information Unavailable" 2>&1
  fi
}

function releaseDetails() {
  local service image version summary=("Name Image Version")
  for service in `compose_client ps --services | xargs -n1 echo`; do
    image=`_getServiceContainerImageRepo $service || echo "unknown"`
    version=`_getServiceContainerVersion $service || echo "unknown"`
    summary+=("$service $image $version")
  done
  for line in "${summary[@]}"; do echo "$line" | awk '{ printf "%-15s  %25-s %s\n", $1, $2, $3 }'; done
}

function _getImageForService() {
  local imageId service=$1
  imageId=`compose_client images -q $service 2>/dev/null`
  if [ "$imageId" == "" ]; then echo "unknown"; else echo "$imageId"; fi
}

function _getServiceContainerImageRepo() {
  local imageRepo imageId service=$1
  imageId=`_getImageForService $service`
  imageRepo=`docker image inspect $imageId --format='{{ index .RepoTags 0 }}' 2>/dev/null | awk -F':' '{print $1}' 2>/dev/null || echo ''`
  echo $imageRepo
}

function _getServiceContainerVersion() {
  local version imageId service=$1
  imageId=`_getImageForService $service`
  version=`docker image inspect $imageId --format='{{ index .Config.Labels "org.opencontainers.image.version" }}' 2>/dev/null || echo ''`
  if [ "$version" == "" ]; then
    case $service in
      "$coreBackendComposeService")
        version=`compose_client exec $coreBackendComposeService cat package.json | jq -r '.version'`
        ;;
      "$couchbaseComposeService")
        version=`compose_client exec $couchbaseComposeService couchbase-cli --version`
        ;;
      *)
        version="tag:`compose_client images $service | awk 'NR != 1 {print $3}'`"
        ;;
    esac
  fi
  echo "$version"
}
# Access logs of a running instance
# Usage:
#   plextrac logs

function mod_logs() {
  tail_logs
}

function tail_logs() {
    compose_client logs -f --tail=50
}
## Functions for managing the Couchbase database

function manage_api_user() {
  info "Creating unprivileged user ${CB_API_USER} with access to ${CB_BUCKET}"
  get_user_approval
  compose_client exec -T $couchbaseComposeService \
    couchbase-cli user-manage --set -c localhost:8091 -u "${CB_ADMIN_USER}" -p "${CB_ADMIN_PASS}" \
      --rbac-username "${CB_API_USER}" --rbac-password "${CB_API_PASS}" --rbac-name='PlexTrac-API-User' \
      --roles bucket_full_access[${CB_BUCKET}] --auth-domain local
}

function manage_backup_user() {
  info "Creating backup user ${CB_BACKUP_USER} with access to ${CB_BUCKET}"
  get_user_approval
  compose_client exec -T $couchbaseComposeService \
    couchbase-cli user-manage --set -c localhost:8091 -u "${CB_ADMIN_USER}" -p "${CB_ADMIN_PASS}" \
      --rbac-username "${CB_BACKUP_USER}" --rbac-password "${CB_BACKUP_PASS}" --rbac-name='PlexTrac-Backup-User' \
      --roles bucket_full_access[${CB_BUCKET}] --auth-domain local
}

function test_couchbase_access() {
  user=$1
  pass=$2
  bucket=${3:-reportMe}
  info "Checking user $user can access couchbase"
  bucketList=$(compose_client exec -T -- $couchbaseComposeService \
                 couchbase-cli bucket-list -c localhost:8091 -u $user -p $pass -o json || echo "noaccess")
  if [ "$bucketList" != "noaccess" ]; then
    bucketList=$(jq '.[].name' <<<$bucketList -r 2>/dev/null)
    debug ".. $user found '$bucketList'"
    grep $bucket <<<"$bucketList" >/dev/null && debug ".. $user is configured correctly" && return
  fi
  error "$user not configured correctly"
  if [ ${VALIDATION_ONLY:-0} -eq 0 ]; then
    return 1
  fi
}

function configure_couchbase_users() {
  title "Checking Couchbase User Accounts"
  test_couchbase_access $CB_ADMIN_USER $CB_ADMIN_PASS || die "The admin user is broken or misconfigured - please contact support!"
  test_couchbase_access $CB_API_USER $CB_API_PASS "reportMe" || manage_api_user
  test_couchbase_access $CB_BACKUP_USER $CB_BACKUP_PASS "reportMe" || manage_backup_user
}
# Manage migrating existing instances
#
# Simply outputs the difference between the upstream docker-compose.yml
# and the local docker-compose.yml/docker-database.yml configs. Optionally
# create the docker-compose.override.yml and prompt user to make necessary edits
#
# Calls `plextrac configure` and `plextrac check`, enabling the admin
# to validate the migration prior to calling `plextrac update` (a manual step)
#
# Archives the existing docker-compose.yml & docker-database.yml (and env)
# files into the backups directory.
#
# Usage:
#   plextrac migrate [-y] [--plextrac-home ...]

function mod_migrate() {
  title "Migrating Existing Instance"
  docker_createInitialComposeOverrideFile

  local legacyScriptPackVersion
  if test -f "${PLEXTRAC_HOME}/docker-compose.yml"; then
    legacyScriptPackVersion=1
    info "Found existing installation in ${PLEXTRAC_HOME}, assuming v1 legacy script pack"
  elif test -f "${PLEXTRAC_HOME}/compose-files/docker-compose.yml"; then
    legacyScriptPackVersion=2
    info "Found existing installation in ${PLEXTRAC_HOME}/compose-files, assuming v2 legacy script pack"
  else
    die "Could not find existing installation in ${PLEXTRAC_HOME}"
  fi

  if checkExistingConfigForOverrides $legacyScriptPackVersion; then
    error "You have existing customizations to your Docker Compose configuration."
    log "\n\tThe diff shows what will be REMOVED from your configuration\n"
    error "Please review the above changes and add any required configuration to ${PLEXTRAC_HOME}/docker-compose.override.yml\n"
    info "Do you wish to continue anyway?"
    if ! get_user_approval; then
      die "Migration cannot continue without resolving local customizations"
    fi
    else
      info "No local customizations detected"
  fi

  info "Continuing..."

  debug "couchbase credentials"
  migrate_getCouchbaseCredentials >> "${PLEXTRAC_HOME}/.env"
  migrate_getDockerHubCredentials >> "${PLEXTRAC_HOME}/.env"

  debug "legacy files"
  migrate_archiveLegacyComposeFiles
  migrate_archiveLegacyScripts

  info "Finished archiving legacy files"
  mod_configure

  title "Migration complete"
  info "Please run 'plextrac install' to complete your installation"
}

function migrate_getCouchbaseCredentials() {
  info "Retrieving Couchbase Credentials"
  local activeCouchbaseContainer="`docker ps | grep plextracdb 2>/dev/null | awk '{print $1}' || echo ""`"
  if [ "$activeCouchbaseContainer" == "" ]; then
    die "Unable to retrieve couchbase credentials from running container, please set them in .env manually"
  fi
  local cbEnv="`docker exec -it $activeCouchbaseContainer env | grep CB_ADMIN`"
  echo "CB_ADMIN_PASS=`echo "$cbEnv" | awk -F= '/PASS/ {print $2}' | grep . || echo "Plextrac"`"
  echo "CB_ADMIN_USER=`echo "$cbEnv" | awk -F= '/USER/ {print $2}' | grep . || echo "Administrator"`"
}

function migrate_getDockerHubCredentials() {
  info "Checking for existing DockerHub credentials"
  local credentials="`jq '.auths."https://index.docker.io/v1/".auth' ~/.docker/config.json -r 2>/dev/null | base64 -d | awk -F':' '{printf "DOCKER_HUB_USER=%s\nDOCKER_HUB_KEY=%s\n", $1, $2}'`"
  if [ "$credentials" == "" ]; then
    error "Please add your DOCKER_HUB_USER & DOCKER_HUB_KEY credentials to ${PLEXTRAC_HOME}/.env"
  fi
  echo "$credentials"
}

function migrate_archiveLegacyScripts() {
  info "Archiving Legacy Scripts"
  backup_ensureBackupDirectory
  debug "`tar --remove-files -cvf ${PLEXTRAC_HOME}/backups/legacy_scripts.tar ${PLEXTRAC_HOME}/{**/,}*.sh 2>/dev/null || true`"
}

function migrate_archiveLegacyComposeFiles() {
  info "Archiving Legacy Compose Files"
  backup_ensureBackupDirectory
  debug "`tar --remove-files -cvf ${PLEXTRAC_HOME}/backups/legacy_composefiles.tar ${PLEXTRAC_HOME}/{**/,}docker-{compose,database}.yml 2>/dev/null || true`"
}

function checkExistingConfigForOverrides() {
  info "Checking for overrides to the legacy docker-compose configuration"
  local composeOverrideFile="${PLEXTRAC_HOME}/docker-compose.override.yml"
  local legacyComposeFile legacyDatabaseFile
  case ${1:-1} in
    1)
      local legacyComposeFile="${PLEXTRAC_HOME}/docker-compose.yml"
      local legacyDatabaseFile="${PLEXTRAC_HOME}/docker-database.yml"
      ;;
    2)
      local legacyComposeFile="${PLEXTRAC_HOME}/compose-files/docker-compose.yml"
      local legacyDatabaseFile="${PLEXTRAC_HOME}/compose-files/docker-database.yml"
      ;;
    *)
      die "Invalid script pack version";;
  esac

  info "Checking legacy configuration"
  local dcCMD="docker-compose -f $legacyComposeFile -f $legacyDatabaseFile"
  ${dcCMD} config -q || die "Invalid legacy configuration - please contact support"

  local decodedComposeFile=$(base64 -d <<<$DOCKER_COMPOSE_ENCODED)
  #diff -N --unified=2 --color=always --label existing --label "updated" $targetComposeFile <(echo "$decodedComposeFile") || return 0
  diff --unified --color=always --show-function-line='^\s\{2\}\w\+' \
    <($dcCMD config --no-interpolate) \
    <(docker-compose -f - <<< "${decodedComposeFile}" -f $composeOverrideFile config --no-interpolate) || return 0
  return 1
  #diff --color=always -y --left-column <($dcCMD config --format=json | jq -S . -r) <(docker-compose -f - <<< "$decodedComposeFile" -f $composeOverrideFile config --format=json | jq -S . -r) | grep -v '^\+'
}
function setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
    BLUE=$(tput setaf 4)
    BOLD=`tput bold` DIM=`tput dim` UNDERLINE=`tput smul` BLINK=`tput blink`
    RESET=`tput sgr0; tput cnorm` NOCURSOR=`tput civis` CLEARLINE=`tput el1`

  else
    RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW='' BLUE=''
    BOLD='' DIM='' UNDERLINE='' BLINK=''
    RESET='' NOCURSOR='' CLEARLINE=''
  fi
}

PRINT_MAX_WIDTH=85
PRINT_FILL_CHAR="-"
PRINT_FILL=$(head -c ${PRINT_MAX_WIDTH} /dev/zero | tr '\0' "${PRINT_FILL_CHAR}")

msg() {
  local in
  local fmt
  if [ $# -ge 2 ]; then
    fmt="${1}"
    shift
    in="$@"
  else
    in="${1:-}"
    fmt="%b\n"
  fi
  _printf "${fmt}" "${in}"
}

_printf() {
  local line msg format=$1
  #while IFS=$'\n' read -ra line || echo "failed to read $2"; do
  IFS=$'\n' readarray -c1 -t msg <<< "${2}"
    for line in "${msg[@]}"; do
      printf >&2 "${format}" "${line}"
    done
  #done <<< "$2\n"
}

die() {
  local message=$1
  local code=${2:-1} # default exit status 1
  error "$message"
  exit "$code"
}

log_func_header() {
  title "${FUNCNAME[1]}"
}

title() {
  TITLE="${1:-${FUNCNAME[1]}}"
  fill=$(echo "$PRINT_MAX_WIDTH-${#TITLE}-4" | bc)
  printf "\n-- %s %.${fill}s\n\n" "${BOLD}${TITLE}${RESET}" "${PRINT_FILL}"
}

debug() {
  if [ ${VERBOSE:-false} == true ]; then
    msg "${DIM}    %b${RESET}\n" "${@}"
  fi
}

log() {
  msg "    %b\n" "$1"
}

info() {
  msg "${GREEN}[+]${RESET} %b\n" "${@}"
}

error() {
  msg "${RED}${BOLD}!!! ${RESET}${BOLD}%b${RESET}\n" "$@"
}
# Simple restore of backups
#
# Usage:
#   plextrac restore

function mod_restore() {
  title "Restoring Couchbase from backup"
  error "This is a potentiall destructive process, are you sure?"
  info "Please confirm before continuing the restore"
  if get_user_approval; then
    compose_client exec $couchbaseComposeService cbrestore /backups http://localhost:8091 -u ${CB_BACKUP_USER} -p "${CB_BACKUP_PASS}" -x conflict_resolve=0,data_only=1
  fi
}
# Manage self-updates to the management utility
#
# Usage: plextrac update --self-only

function checkForManagerUtilUpdate() {
  pass
}
function upgrade_os() {
title "Updating OS packages, this make take some time!"
apt-get update > /dev/null 2>&1 \
    && apt-get upgrade -y -o Dpkg::Options::="--force-confold" > /dev/null 2>&1 \
    && apt-get autoremove -y > /dev/null 2>&1
debug "Done."
}

function install_os_dependencies() {
title "Installing/updating required packages..."
apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common \
    jq \
    unzip \
    > /dev/null 2>&1
debug "Done."
}

function install_docker() {
  if ! command -v docker &> /dev/null || [ ${1:-"force"} == "force" ]; then
    title "installing docker, this might take some time..."
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - > /dev/null 2>&1
    debug "docker fingerprint: "
    apt-key fingerprint 0EBFCD88
    add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" > /dev/null 2>&1
    apt update > /dev/null 2>&1
    apt install -y docker-ce docker-ce-cli containerd.io > /dev/null 2>&1
    systemctl enable docker > /dev/null 2>&1
    debug `docker --version`
    log "Done."
  else
    DVER=$(docker --version)
    info "docker already installed, version: ${DVER}"
  fi
}

function install_docker_compose() {
  if ! command -v docker-compose &> /dev/null || [ ${1:-"force"} == "force" ]; then
    title "installing docker-compose..."
    curl -sL $(curl -sL \
      https://api.github.com/repos/docker/compose/releases/latest | jq -r \
      ".assets[] | select(.name | test(\"^docker-compose-$(uname -s)-$(uname -m)$\"; \"i\")) | .browser_download_url" | grep -v .sha256) -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
    DCVER=$(docker-compose --version)
    info "docker compose installed, version: $DCVER"
  else
    DCVER=$(docker-compose --version)
    info "docker-compose already installed, version: ${DCVER}"
  fi
  log "Done."
}
function create_user() {
  # create "plextrac" user with UID/GID 1337 to match the UID/GID of the container user
  # this is required for anything in the uploads directory to
  if ! id -u "plextrac" >/dev/null 2>&1
  then
    info "Adding plextrac user..."
    useradd --uid 1337 \
            --groups docker \
            --shell /bin/bash \
            --create-home --home "${PLEXTRAC_HOME}" \
            plextrac
    log "Done."
  fi
}

function configure_user_environment() {
  info "Configuring plextrac user environment..."
    test -f /opt/plextrac/.profile || cp /etc/skel/.profile /opt/plextrac/.profile
    test -f /opt/plextrac/.bashrc || cp /etc/skel/.bashrc /opt/plextrac/.bashrc
    mkdir -p "${PLEXTRAC_HOME}/.local/bin"
    sed -i 's/#force_color_prompt=yes/force_color_prompt=yes/' "${PLEXTRAC_HOME}/.bashrc"
    egrep 'PATH=${HOME}/.local/bin:$PATH' "${PLEXTRAC_HOME}/.bashrc" || echo 'PATH=${HOME}/.local/bin:$PATH' >> "${PLEXTRAC_HOME}/.bashrc"
}

function copy_scripts() {
  info "Copying plextrac CLI to user PATH..."
  $(dirname $0)/plextrac dist > "${PLEXTRAC_HOME}/.local/bin/plextrac" || cp $0 "${PLEXTRAC_HOME}/.local/bin/plextrac"
  chmod +x "${PLEXTRAC_HOME}/.local/bin/plextrac"
  log "Done."
}

function fix_file_ownership() {
  info "Fixing file ownership in ${PLEXTRAC_HOME} for plextrac"
  chown -R plextrac:plextrac "${PLEXTRAC_HOME}"
  log "Done."
}

function get_user_approval() {
  # If interactive, prompt for user approval & return 0
  # If non-interactive, log failure and return 1
  # If -y/--assume-yes/ASSUME_YES flags/envvars are set, return 0
  if [ ${ASSUME_YES:-false} == "true" ]; then return 0; fi
  tty -s || die "Unable to request user approval in non-interactive shell, try passing the -y or --assume-yes CLI flag"
  PS3='Please select an option: '
  select opt in "Yes" "No" "Exit"; do
    case "${REPLY,,}" in
      "yes" | "y")
        return 0
        ;;
      "no" | "n")
        return 1
        ;;
      "q" | "quit" | "exit")
        die "User cancelled selection";;
      *)
        error "Invalid selection: $REPLY was not one of the provided options"
        ;;
    esac
  done
}

function panic() {
  echo >&2 "$*"
  stacktrace
  exit 1
}

function stacktrace() {
  local frame=0 LINE SUB FILE
  while read LINE SUB FILE < <(caller "$frame"); do
    printf '  %s @ %s:%s' "${SUB}" "${FILE}" "${LINE}"
    ((frame++))
  done
}
function z_end_of_plextrac() {
  echo ""
}

DOCKER_COMPOSE_ENCODED=dmVyc2lvbjogJzMuNScKCnNlcnZpY2VzOgogIHBsZXh0cmFjYXBpOgogICAgZW52X2ZpbGU6CiAgICAgIC0gLmVudgogICAgaW1hZ2U6ICJwbGV4dHJhYy9wbGV4dHJhY2FwaToke1VQR1JBREVfU1RSQVRFR1k6LXN0YWJsZX0iCiAgICBwb3J0czoKICAgIC0gMTI3LjAuMC4xOjQzNTA6NDM1MC90Y3AKICAgIHJlc3RhcnQ6IGFsd2F5cwogICAgdm9sdW1lczoKICAgIC0gdXBsb2FkczovdXNyL3NyYy9wbGV4dHJhYy1hcGkvdXBsb2FkczpydwogICAgaGVhbHRoY2hlY2s6CiAgICAgIHRlc3Q6CiAgICAgICAgLSAiQ01ELVNIRUxMIgogICAgICAgIC0gImN1cmwgaHR0cDovL2xvY2FsaG9zdDo0MzUwL2FwaS92Mi9oZWFsdGgvbGl2ZSIKCiAgcGxleHRyYWNkYjoKICAgIGVudmlyb25tZW50OgogICAgICBBRE1JTl9FTUFJTDogIiR7QURNSU5fRU1BSUw6P2Vycn0iCiAgICAgIENCX0FETUlOX1VTRVI6ICIke0NCX0FETUlOX1VTRVI6P2Vycn0iCiAgICAgIENCX0FETUlOX1BBU1M6ICIke0NCX0FETUlOX1BBU1M6P2Vycn0iCiAgICAgIENCX0FQSV9VU0VSOiAiJHtDQl9BUElfVVNFUjo/ZXJyfSIKICAgICAgQ0JfQVBJX1BBU1M6ICIke0NCX0FQSV9QQVNTOj9lcnJ9IgogICAgICBDQl9CQUNLVVBfVVNFUjogIiR7Q0JfQkFDS1VQX1VTRVI6P2Vycn0iCiAgICAgIENCX0JBQ0tVUF9QQVNTOiAiJHtDQl9CQUNLVVBfUEFTUzo/ZXJyfSIKICAgICAgQ0JfQlVDS0VUOiAiJHtDQl9CVUNLRVQtfSIKICAgICAgQkFDS1VQX0RJUjogIiR7QkFDS1VQX0RJUi19IgogICAgICBidWNrZXQ6ICIke2J1Y2tldC19IgogICAgaW1hZ2U6IHBsZXh0cmFjL3BsZXh0cmFjZGI6Ni41LjEKICAgIHBvcnRzOgogICAgLSAxMjcuMC4wLjE6ODA5MTo4MDkxL3RjcAogICAgLSAxMjcuMC4wLjE6ODA5Mjo4MDkyL3RjcAogICAgLSAxMjcuMC4wLjE6ODA5Mzo4MDkzL3RjcAogICAgLSAxMjcuMC4wLjE6ODA5NDo4MDk0L3RjcAogICAgcmVzdGFydDogYWx3YXlzCiAgICB2b2x1bWVzOgogICAgLSBkYmRhdGE6L29wdC9jb3VjaGJhc2UvdmFyOnJ3CiAgICAtIGNvdWNoYmFzZS1iYWNrdXBzOi9iYWNrdXBzOnJ3CiAgICBoZWFsdGhjaGVjazoKICAgICAgdGVzdDoKICAgICAgICAtICJDTUQtU0hFTEwiCiAgICAgICAgLSAiY3VybCAtLWhlYWQgLS1mYWlsIC1YIEdFVCAtdSAkQ0JfQURNSU5fVVNFUjokQ0JfQURNSU5fUEFTUyAtSCAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJyBodHRwOi8vbG9jYWxob3N0OjgwOTEvcG9vbHMvZGVmYXVsdC9idWNrZXRzL3JlcG9ydE1lIHx8IGV4aXQgMSIKICAgICAgaW50ZXJ2YWw6IDEwcwogICAgICByZXRyaWVzOiA2CiAgICAgIHN0YXJ0X3BlcmlvZDogMzBzCgogIHBsZXh0cmFjbmdpbng6CiAgICBpbWFnZTogInBsZXh0cmFjL3BsZXh0cmFjbmdpbng6JHtVUEdSQURFX1NUUkFURUdZOi1zdGFibGV9IgogICAgZW52aXJvbm1lbnQ6CiAgICAgIENMSUVOVF9ET01BSU5fTkFNRTogIiR7Q0xJRU5UX0RPTUFJTl9OQU1FOj9lcnJ9IgogICAgICBMRVRTX0VOQ1JZUFRfRU1BSUw6ICIke0xFVFNfRU5DUllQVF9FTUFJTDotfSIKICAgICAgVVNFX0NVU1RPTV9DRVJUOiAiJHtVU0VfQ1VTVE9NX0NFUlQtfSIKICAgICAgSElERV9DT1BZUklHSFQ6ICIke0hJREVfQ09QWVJJR0hULX0iCiAgICAgIEhJREVfUEFHRV9USVRMRTogIiR7SElERV9QQUdFX1RJVExFLX0iCiAgICAgIE9WRVJSSURFX1NFTlRSWV9GUk9OVEVORF9FTkFCTEVEOiAiJHtPVkVSUklERV9TRU5UUllfRlJPTlRFTkRfRU5BQkxFRC19IgogICAgcG9ydHM6CiAgICAtIDAuMC4wLjA6ODA6ODAvdGNwCiAgICAtIDAuMC4wLjA6NDQzOjQ0My90Y3AKICAgIHJlc3RhcnQ6IGFsd2F5cwogICAgdm9sdW1lczoKICAgIC0gbGV0c2VuY3J5cHQ6L2V0Yy9sZXRzZW5jcnlwdDpydwoKICByZWRpczoKICAgIGltYWdlOiByZWRpczo2LjItYWxwaW5lCiAgICBjb21tYW5kOiAicmVkaXMtc2VydmVyIC0tcmVxdWlyZXBhc3MgJHtSRURJU19QQVNTV09SRH0iCiAgICBjb250YWluZXJfbmFtZTogcmVkaXMKICAgIHZvbHVtZXM6CiAgICAtIHJlZGlzOi9ldGMvcmVkaXM6cncKCnZvbHVtZXM6CiAgZGJkYXRhOiB7fQogIHVwbG9hZHM6IHt9CiAgbGV0c2VuY3J5cHQ6IHt9CiAgcmVkaXM6CiAgICBkcml2ZXI6IGxvY2FsCiAgICBkcml2ZXJfb3B0czoKICAgICAgdHlwZTogJ25vbmUnCiAgICAgIG86ICdiaW5kJwogICAgICBkZXZpY2U6ICcke1BMRVhUUkFDX0hPTUU6LS59L3ZvbHVtZXMvcmVkaXMnCiAgY291Y2hiYXNlLWJhY2t1cHM6CiAgICBkcml2ZXI6IGxvY2FsCiAgICBkcml2ZXJfb3B0czoKICAgICAgdHlwZTogJ25vbmUnCiAgICAgIG86ICdiaW5kJwogICAgICBkZXZpY2U6ICcke1BMRVhUUkFDX0hPTUU6LS59L2JhY2t1cHMvY291Y2hiYXNlJwoKbmV0d29ya3M6CiAgZGVmYXVsdDoKICAgIG5hbWU6IHBsZXh0cmFjCiAgICBkcml2ZXI6IGJyaWRnZQo=
DOCKER_COMPOSE_OVERRIDE_ENCODED=c2VydmljZXM6CiAgcGxleHRyYWNuZ2lueDoKICAgIHZvbHVtZXM6IFtdCiAgICAjIGxlYXZlIHRoZXNlIGNvbW1lbnRlZCBvdXQgdW5sZXNzIHVzaW5nIGN1c3RvbSBsb2dvIGZvciB3aGl0ZWxhYmVsaW5nIGFuZC9vciB1c2luZyBjdXN0b20gY2VydGlmaWNhdGVzCiAgICAjIHZvbHVtZXM6CiAgICAjICAgLSA8PCBsb2NhbCBmaWxlIHBhdGggaGVyZSA+PjovdXNyL3NoYXJlL25naW54L2h0bWwvZGlzdC9pbWcvUGxleFRyYWNfTG9nby5wbmcKICAgICMgICAtIDw8IGxvY2FsIGtleSBwYXRoIGhlcmUgPj46L2V0Yy9zc2wvYXBwLnBsZXh0cmFjLmtleQogICAgIyAgIC0gPDwgbG9jYWwgY2VydCBwYXRoIGhlcmUgPj46L2V0Yy9zc2wvYXBwX2NlcnRfY2hhaW4uY3J0
main "$@"
